// Mocks generated by Mockito 5.3.2 from annotations
// in profile_app/test/unit_test/provider/student_list_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:profile_app/db/students_database.dart' as _i3;
import 'package:profile_app/model/student.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStudent_0 extends _i1.SmartFake implements _i2.Student {
  _FakeStudent_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IStudentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIStudentRepository extends _i1.Mock
    implements _i3.IStudentRepository {
  @override
  _i4.Future<_i2.Student> create({
    required String? name,
    required String? roll,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #name: name,
            #roll: roll,
          },
        ),
        returnValue: _i4.Future<_i2.Student>.value(_FakeStudent_0(
          this,
          Invocation.method(
            #create,
            [],
            {
              #name: name,
              #roll: roll,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Student>.value(_FakeStudent_0(
          this,
          Invocation.method(
            #create,
            [],
            {
              #name: name,
              #roll: roll,
            },
          ),
        )),
      ) as _i4.Future<_i2.Student>);
  @override
  _i4.Future<_i2.Student> read(int? id) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [id],
        ),
        returnValue: _i4.Future<_i2.Student>.value(_FakeStudent_0(
          this,
          Invocation.method(
            #read,
            [id],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Student>.value(_FakeStudent_0(
          this,
          Invocation.method(
            #read,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Student>);
  @override
  _i4.Future<Iterable<_i2.Student>> readAll() => (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
        ),
        returnValue: _i4.Future<Iterable<_i2.Student>>.value(<_i2.Student>[]),
        returnValueForMissingStub:
            _i4.Future<Iterable<_i2.Student>>.value(<_i2.Student>[]),
      ) as _i4.Future<Iterable<_i2.Student>>);
  @override
  _i4.Future<int> update(_i2.Student? student) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [student],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
